package StreamBurstyEventsDetection;

import java.util.Arrays;

public class MinHashCounter {
    private final int[][] hashWindow; // min, val
    public int count;

    public MinHashCounter() {
        hashWindow = new int[128][2];
        clear();
    }

    public static int[] getHash(int id) {
        int[] ret = new int[128];
        final int[] p = {
                95490613, 53044151, 49075699, 10916641, 77569031, 31767431, 75004273, 56025583,
                71926471, 71804099, 24636947, 67566659, 83036269, 54636821, 23832779, 31226771,
                59385163, 77807893, 37233191, 87895337, 73607851, 42409751, 77666551, 53871239,
                15411089, 82638089, 92813429, 37212533, 82774501, 27950317, 36914627, 51210169,
                35726597, 39281117, 45829307, 57764227, 58102673, 25268641, 28443799, 13083893,
                72089837, 83083381, 49732283, 21902761, 50358491, 40608101, 20600501, 77302543,
                80543443, 86475269, 21544759, 54315607, 75243407, 60895147, 26875273, 45121157,
                56904983, 96187031, 26181313, 26044939, 20067647, 22519793, 43485149, 14092709,
                97103641, 26260309, 58534981, 67637497, 27473491, 94167457, 92592893, 17486437,
                72906997, 47274713, 83690363, 76977673, 68425963, 64381333, 24877079, 56312749,
                21847417, 74037419, 95872559, 33146999, 50113001, 11723749, 64612549, 79265273,
                15347833, 10268171, 71575351, 27113483, 14637463, 50235821, 15274579, 20198911,
                65628961, 30439889, 55470859, 22743373, 52321739, 37829117, 44037739, 85821317,
                44475121, 98832607, 77837801, 81977183, 14039693, 94504013, 27789347, 33393979,
                61115389, 15376261, 72722399, 63911443, 77445227, 66197123, 48690611, 69478819,
                94189919, 74892023, 86843749, 59729119, 12273433, 45801443, 22159271, 33761957
        };
        for (int i = 0; i < 128; i++)
            ret[i] = p[i] * id + p[(i + 1) & 127];
        return ret;
    }

    public void clear() {
        for (int i = 0; i < 128; i++) {
            hashWindow[i][0] = Integer.MAX_VALUE;
            hashWindow[i][1] = 0;
        }
        count = 0;
    }

    public void put(int id) {
        int[] hash = getHash(id);
        for (int i = 0; i < 128; i++) {
            if (hash[i] < hashWindow[i][0]) {
                hashWindow[i][0] = hash[i];
                hashWindow[i][1] = id;
            }
        }
        count++;
    }

    public byte[] getMinHash() {
        byte[] ret = new byte[128];
        for (int i = 0; i < 128; i++)
            ret[i] = (byte)(hashWindow[i][1] & 0xff);
        return ret;
    }

    public static int compareHash(byte[] a, byte[] b) {
        int ret = 0;
        for (int i = 0; i < 128; i++)
            if (a[i] != b[i])
                ret++;
        return ret;
    }
}
